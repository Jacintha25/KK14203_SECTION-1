//for color
import java.awt.Color;
//for font style & size
import java.awt.Font;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
//required for exception
import java.io.IOException;
import java.util.ArrayList;

abstract class Cake{
   String cakeName;
   String[] topping;
   String[] toppingOrder;
   double priceSmall, priceMedium, priceBig, totalPrice;
   int size, qty;
   
   Cake(String cakeName){this.cakeName=cakeName;}
   
   abstract void setCake(String[] t, double pSmall, double pMed, double pBig);
     
   
   public void cakeOrder(String[] tOrder, int q, int s){
      toppingOrder = tOrder;
      qty = q;
      size = s;
   }
   
   public double getSizePrice(){
      double sizePrice=0.0;
      if(size==1) sizePrice = priceSmall;
      else if(size==2) sizePrice = priceMedium;
      else if(size==3) sizePrice = priceBig;
      
      return sizePrice;
   }
   
   public double getTotalPrice(){
      totalPrice = getSizePrice();
      totalPrice *= qty;
      totalPrice += (toppingOrder.length*10);
      return totalPrice;  
   }
   
   public int getQty(){
      return qty;  
   }
   
   public String getSize(){
      String sizeStrg="";
      if(size==1) sizeStrg="Small";
      else if (size==2) sizeStrg="Medium";
      else if (size==3) sizeStrg="Large";
      return sizeStrg;
   }
   
   public void printCake(){
      System.out.println("-----------------------------");
      System.out.println("\t\tCake Menu");
      System.out.println("-----------------------------");
      System.out.println(cakeName + " Cake with available toppings:");
      for(int i=0; i<topping.length; i++){
         System.out.println(i+1 + ") " + topping[i]);
      } 
      System.out.println("\nPrice:");
      System.out.println("[1] Small : RM" + priceSmall);
      System.out.println("[2] Medium: RM" + priceMedium);
      System.out.println("[3] Big   : RM" + priceBig);
   }
   
   //local print order to console
   public void printOrder(){
      System.out.println("\n\nCake Order detail:");
      System.out.println("-------------------------------------------");
      System.out.print("Topping Order: ");
      for(int i=0; i<toppingOrder.length; i++){
         System.out.print(i+1 + ") " + toppingOrder[i] + " ");
      } 
      System.out.println("\nSize    : " + getSize());
      System.out.println("-------------------------------------------");
      System.out.println("Total Price: RM" + getTotalPrice()); 
      System.out.println("-------------------------------------------"); 
   } 
   
   //return print order to GUI call
   public String printOrder_GUI(){
      String txt = "\n\nCake Order detail:\n";
      txt += "-------------------------------------------\n";
      txt += "Topping Order: \n";
      for(int i=0; i<toppingOrder.length; i++){
         txt += "(" + (i+1) + ") " + toppingOrder[i] + " \n";
      } 
      txt += "\nSize        : " + getSize() + "\n";
      txt += "Quantity : " + getQty() + "\n";
      txt += "-------------------------------------------\n";
      txt += "Total Price: RM" + getTotalPrice() + "\n"; 
      txt += "-------------------------------------------\n"; 
      return txt;
   }      
}

   
class BlackForest extends Cake{
 
   BlackForest(String name){
      super(name);
   }
   
   void setCake(String[] topping, double priceSmall, double priceMedium, double priceBig){
      this.topping = topping;
      this.priceSmall = priceSmall;
      this.priceMedium = priceMedium;
      this.priceBig = priceBig;
   }
}



class FormPanel extends JPanel implements ActionListener{
   JButton buttonOrder;
   JButton buttonAdd;
   JLabel titleLabel, jcomp2;
   JTextArea mainTextArea, mainTextArea2;
   JComboBox jcb;
   static BlackForest cake;
   static ArrayList<String> order;
   Font titleFont = new Font("Times New Roman", Font.CENTER_BASELINE, 17); 
   
   String filePath = "data.txt";

   public FormPanel() {
      //construct preComponents
      String[] jcbItems = {"[Select]"};
   
      //construct components
      titleLabel = new JLabel ("Cake Menu");
      buttonOrder = new JButton ("Order");
      buttonAdd = new JButton ("Add Topping");
      
      mainTextArea = new JTextArea();
	  mainTextArea.setBounds(40, 80, 400, 200);
	  mainTextArea.setBackground(Color.PINK);
	  mainTextArea.setForeground(Color.BLACK);//set the font color
	  mainTextArea.setFont(titleFont);
	  mainTextArea.setLineWrap(true);// convenient function to have( automatically lock text if write too much)
      
	  mainTextArea2 = new JTextArea();
	  mainTextArea2.setBounds(40, 80, 400, 200);
	  mainTextArea2.setBackground(Color.PINK);
	  mainTextArea2.setForeground(Color.BLACK);//set the font color
	  mainTextArea2.setFont(titleFont);
	  mainTextArea2.setLineWrap(true);// convenient function to have( automatically lock text if write too much)
      
      JScrollPane jt1_sp = new JScrollPane(mainTextArea);
      JScrollPane jt2_sp = new JScrollPane(mainTextArea2);
      jcb = new JComboBox (jcbItems);
      jcomp2 = new JLabel ("Topping Selection");
      
      buttonAdd.addActionListener(this);
      buttonOrder.addActionListener(this);
   
      //adjust size and set layout
      setPreferredSize (new Dimension (520, 725));
      setLayout (null);//using no layout managers / can customize the layout
   
      //add components
      add (buttonAdd);
      add (buttonOrder);
      add (jt1_sp);
      add (jt2_sp);
      add (jcb);
      add (jcomp2);
      add (titleLabel);
   
      buttonAdd.setBounds (360, 295, 120, 30);
      buttonOrder.setBounds(360, 335, 120, 30);
      jt2_sp.setBounds (50, 0, 400, 285);
      jt1_sp.setBounds (50, 400, 400, 285);
      jcb.setBounds (180, 295, 165, 30);
      jcomp2.setBounds (55, 295, 155, 30);
      
   }
   
   public void DisplayMenu(){
   
      String[] toppings = {"Chocolate", "Cherries", "Whipped Cream"};
      String text = ("\t-----------------------------\n");
      text += "\t          Cake Menu\n";
      text += "\t-----------------------------\n";
      text += "Black Forest with available toppings:\n";
      for(int i=0; i<toppings.length; i++){
         text += "\n" + (i+1) + ")  " + toppings[i] + "\n";
      } 
      text += "\nPrice:\n";
      text += "[1] Small     : RM45.0 \n";
      text += "[2] Medium : RM65.0 \n";
      text += "[3] Big         : RM80.0 \n";
      mainTextArea2.append(text);
   }
   
   public void actionPerformed(ActionEvent ae){
      String command = ae.getActionCommand(); 
      
      if(command.equals("Add Topping")){
         order.add(jcb.getSelectedItem().toString());      
         mainTextArea.append(jcb.getSelectedItem().toString() + "\n");   
      }
      else if(command.equals("Order")){
         String str_order[] = new String[order.size()]; 
      
         
         for (int j = 0; j < order.size(); j++) { 
            str_order[j] = order.get(j); 
         }
        
         cake.cakeOrder(str_order, 1, 2);
         String txt = cake.printOrder_GUI();
         mainTextArea.append(txt);
         saveData();
      }    
   }
   
   //write to file
   public void saveData(){
      File file = new File(filePath);
      FileWriter fr = null;
      BufferedWriter br = null;
      PrintWriter pr = null;
      
      String String = "";
      String str_order[] = new String[order.size()];
      for(int i=0; i < order.size(); i++){
         str_order[i] = order.get(i);
         String += str_order[i] + ", ";
      }
      String += "Size: " + cake.getSize();
      String += ", Quantity: " + (String.valueOf(cake.qty));
      String += ", Total Price: " + (String.valueOf(cake.getTotalPrice()));
      
      
      //exception implementation
      try {
      	
         fr = new FileWriter(file, true);
         br = new BufferedWriter(fr);
         pr = new PrintWriter(br);
         pr.println(String);
      } catch (IOException e) {			
    	  mainTextArea.setText(e.toString());
      } finally {
         try {
            pr.close();
            br.close();
            fr.close();
         } catch (IOException e) {
        	 mainTextArea.setText(e.toString());
         }
      }
   }
   
   public void updateCB(String[] topping){
      for(int i=0; i<topping.length; i++){
         jcb.addItem(topping[i]);
      }      
   }

}


public class Lab6_exercise3 {
	public static void main(String[]args) {
		      FormPanel blackforestcake = new FormPanel();
		      blackforestcake.cake = new BlackForest("Generic Cake");
		      blackforestcake.order = new ArrayList<String>();
		      
		      
		      JFrame window = new JFrame("WELCOME TO J's CAKE HOUSE");//initialization
		      String[] topping = {"Chocolate", "Cherries", "Whipped Cream"};
		      blackforestcake.cake.setCake(topping, 45.00, 65.00, 80.00); 
		      blackforestcake.DisplayMenu();
		      
		      blackforestcake.updateCB(topping);
		      
		      window.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
		      window.getContentPane().add (blackforestcake);
		      window.pack();
		      window.setVisible (true);
		      
		   }
}
